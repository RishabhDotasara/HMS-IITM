// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hostel{
  hostelId String @id @default(uuid())
  hostelName String @unique
  hostelFor String //gender
  students User[]
  singleRooms Int 
  doubleRooms Int
  tripleRooms Int
  allotmentStatus Boolean @default(false) //this is basically if the hostel is accepting requests or not, could change it in further updates.
  rooms Room[]
  wings Wing[]
  allotmentDone Boolean @default(false)
  appliedStudents Allotment[] @relation("AppliedHostel")
 
}

model Wing {
  wingId String @id @default(uuid())
  wingName String
  rooms Room[]
  hostelId String @default("")
  hostel Hostel @relation(fields: [hostelId], references: [hostelId])

  applicants Allotment[] @relation("AppliedWing")
}

model Room {
  roomId String @id @default(uuid())
  roomNo String
  capacity Int
  wingId String
  wing Wing @relation(fields: [wingId], references: [wingId])
  hostelId String @default("")
  hostel Hostel @relation(fields: [hostelId], references: [hostelId])
  students User[] @relation("currentRoom")//these are the people in this room right now.
  appliedStudents Allotment[] @relation("AppliedRoom")
  
}

model User {
  userId String @id @default(uuid()) 
  username String @default("Username")
  rollNo String @unique()
  email String 
  password String 
  isSuperUser Boolean @default(false)
  hostelId String? @default("")
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
  roomId String? @default("")
  room Room? @relation("currentRoom",fields: [roomId], references: [roomId]) //this is the current room
  requestId String? 
  request Allotment? @relation("Applicants", fields: [requestId], references: [requestId])
  
}

model Allotment{
  requestId String @id @default(uuid())
  creatorUserId String
  users User[] @relation("Applicants")
  hostelId String
  hostel Hostel @relation("AppliedHostel",fields: [hostelId], references: [hostelId])
  roomId String
  room Room @relation("AppliedRoom",fields: [roomId], references: [roomId])
  wingId String
  wing Wing @relation("AppliedWing",fields: [wingId], references: [wingId])
  status Boolean @default(false)
}

